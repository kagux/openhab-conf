val logName = "astro"

rule "Calculate time of day state" 
when
  System started or
  Channel 'astro:sun:home:rise#event'    triggered START or
  Channel 'astro:sun:home:set#event'     triggered START or
  Channel 'astro:sun:minus90:set#event'  triggered START or
  Time cron "0 1 0 * * ? *" or
  Time cron "0 0 6 * * ? *" or
  Time cron "0 0 22 * * ? *"
then

  logInfo(logName, "Calculating time of day...")
 
  val long morning_start   = now.withTimeAtStartOfDay.plusHours(6).millis
  val long day_start       = (vSunrise_Time.state as DateTimeType).getZonedDateTime.toInstant.toEpochMilli
  val long evening_start   = (vSunset_Time.state as DateTimeType).getZonedDateTime.toInstant.toEpochMilli
  val long night_start     = now.withTimeAtStartOfDay.plusHours(22).millis
  val long bed_start       = now.withTimeAtStartOfDay.millis

  val long afternoon_start = (vEvening_Time.state as DateTimeType).getZonedDateTime.toInstant.toEpochMilli

  var curr = "UNKNOWN"
  
  switch now {
  	case now.isAfter(morning_start)   && now.isBefore(day_start):       curr = "MORNING"
  	case now.isAfter(day_start)       && now.isBefore(afternoon_start): curr = "DAY"
  	case now.isAfter(afternoon_start) && now.isBefore(evening_start):   curr = "AFTERNOON"
  	case now.isAfter(evening_start)   && now.isBefore(night_start):     curr = "EVENING"
  	case now.isAfter(night_start):                                      curr = "NIGHT"
  	case now.isAfter(bed_start)       && now.isBefore(morning_start):   curr = "BED"
  }

  logInfo(logName, "Calculated time of day is " + curr)
  vTimeOfDay.sendCommand(curr)
end